globals [
  navmesh
  navmesh-matrix
]

to setup-navmesh
  ;; Stub
  let obstacles n-of obstacle-count-stub patches
  ask obstacles [
    set pcolor black
  ]

  set navmesh []
  set navmesh-matrix []

  let x 0
  let node-index 0
  repeat max-pxcor + 1 [
    let vertical-slab (list (list node-index sort patches with [ pxcor = x ]))
    let y max-pycor
    let segment-index 0

    set node-index node-index + 1

    foreach last first vertical-slab [ ;; for each patch in vertical slab
      ask ? [
        if pcolor = black [
          ;; make new segment with patches below obstacle
          set vertical-slab lput (list node-index (filter [ [ pycor ] of ? < y ] (last last vertical-slab))) vertical-slab

          ;; remove obstacle and patches below it from segment
          set vertical-slab replace-item segment-index vertical-slab (list (node-index - 1) filter [ [ pycor ] of ? > y ] last item segment-index vertical-slab)

          set segment-index segment-index + 1
          set node-index node-index + 1
        ]
      ]

      set y y - 1
    ]

    ;; remove empty segments
    set vertical-slab filter [ not empty? last ? ] vertical-slab

    ;; union segments and add entries to adjacency matrix
    ifelse x > 0 [
      foreach vertical-slab [
        let segment-id first ?
        let segment last ?
        let top-edge [ pycor ] of first segment
        let bottom-edge [ pycor ] of last segment
        let left-edge [ pxcor ] of first segment

        let hit false

        foreach filter [ [ pxcor ] of last last ? + 1 = left-edge and [ pycor ] of first last ? = top-edge and [ pycor ] of last last ? = bottom-edge ] navmesh [
          ;; add segment to ?
          set navmesh replace-item (position ? navmesh) navmesh (list first ? sort sentence last ? segment)

          ;; remove segment from vertical-slab
          set vertical-slab remove (list segment-id segment) vertical-slab

          set hit true
        ]

        if not hit [
          set navmesh-matrix lput (list first ? []) navmesh-matrix

          let segment-adjacency-list first filter [ first ? = segment-id ] navmesh-matrix

          ;; add entries to adjacency matrix
          foreach filter [ [ pxcor ] of last last ? + 1 = left-edge and ([ pycor ] of first last ? >= top-edge and [ pycor ] of last last ? <= bottom-edge) or ([ pycor ] of first last ? <= top-edge and [ pycor ] of last last ? >= bottom-edge) ] navmesh [
            let node-id first ?
            let node-adjacency-list first filter [ first ? = node-id ] navmesh-matrix

            let segment-position position segment-adjacency-list navmesh-matrix
            set segment-adjacency-list replace-item 1 segment-adjacency-list lput node-id last segment-adjacency-list
            set navmesh-matrix replace-item segment-position navmesh-matrix segment-adjacency-list

            let node-position position node-adjacency-list navmesh-matrix
            set node-adjacency-list replace-item 1 node-adjacency-list lput segment-id last node-adjacency-list
            set navmesh-matrix replace-item node-position navmesh-matrix node-adjacency-list
          ]
        ]
      ]
    ] [
      foreach vertical-slab [
        set navmesh-matrix lput (list first ? []) navmesh-matrix
      ]
    ]

    ;; add segments to navmesh
    foreach vertical-slab [
      set navmesh lput ? navmesh
    ]

    set x x + 1
  ]

  update-navmesh-display
end

to update-navmesh-display
  toggle-color-navmesh
  toggle-label-navmesh
end

to toggle-color-navmesh
  let node-colors ifelse-value color-navmesh? [
    filter [ ? != black ] base-colors
  ] [
    [ green ]
  ]
  let index 0

  foreach navmesh [
    foreach last ? [
      ask ? [
        set pcolor item index node-colors
      ]
    ]

    set index ifelse-value (index + 1 = length node-colors) [ 0 ] [ index + 1 ]
  ]
end

to toggle-label-navmesh
  ifelse label-navmesh? [
    foreach navmesh [
      let node-label first ?

      foreach last ? [
        ask ? [
          set plabel node-label
        ]
      ]
    ]
  ] [
    foreach navmesh [
      foreach last ? [
        ask ? [
          set plabel ""
        ]
      ]
    ]
  ]
end

to output-navmesh
  foreach navmesh [
    output-show ?
  ]
end

to output-navmesh-matrix
  foreach navmesh-matrix [
    output-show ?
  ]
end
