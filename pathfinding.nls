;; search node structure: [<node-id> <parent-node> <g-cost> <h-cost>]
;; path structure: [[<xcor> <ycor>] ...]

globals [
  heuristic
]

to setup-pathfinding
  set heuristic task manhattan-distance
end



to-report get-path [ #source-patch #goal-patch ]
  let source-id containing-node #source-patch
  let destination-id containing-node #goal-patch
  
  ;; return an empty path if one of the patches aren't found
  if source-id = -1 or destination-id = -1 [
    report []
  ]
  
  let source-node (list source-id -1 0 (runresult heuristic source-id destination-id))
  
  ;; conduct search
  let agenda (list source-node)
  let prune []
  while [ not empty? agenda ] [
    ;; get node from agenda
    set agenda sort-by [ item 2 ?1 + item 3 ?1 < item 2 ?2 + item 3 ?2 ] agenda
    let node first agenda
    set agenda but-first agenda
    
    ;; add node to prune list
    set prune lput first node prune
    
    ;; check if node is destination
    ifelse first node = destination-id [
      report construct-path node #source-patch #goal-patch
    ] [
      ;; get adjacent nodes
      let adjacent-nodes map [ (list ? node ((item 2 node) + 1) (runresult heuristic ? destination-id)) ] adjacency-list first node
      
      ;; add nodes to agenda
      set agenda sentence agenda filter [ not member? first ? prune and not member? ? agenda ] adjacent-nodes
    ]
  ]
  
  ;; no path found
  report []
end



to-report construct-path [ #node #start #end ]
  let node #node
  let node-list (list first node)
  
  while [ item 1 node != -1 ] [
    set node item 1 node
    set node-list fput first node node-list
  ]
  
  let edge-list []
  
  let index 0
  while [ index + 1 < length node-list ] [
    set edge-list lput get-edge item index node-list item (index + 1) node-list edge-list
    set index index + 1
  ]
  
  ifelse smooth-path? [
    report string-pulling edge-list [ (list pxcor pycor) ] of #start [ (list pxcor pycor) ] of #end
  ] [
    let point-list (list [ (list pxcor pycor) ] of #start)
    
    foreach edge-list [
      set point-list lput (list ((first first ? + first last ?) / 2) ((last first ? + last last ?) / 2)) point-list
    ]
    
    report lput [ (list pxcor pycor) ] of #end point-list
  ]
end



to-report string-pulling [ #edges #start #end ]
  let index length #edges - 1
  let end-point #end
  
  let smoothed-path (list #end)
  
  while [ index >= 0 ] [
    let edge item index #edges

    let new-point get-closest-point-on-line edge end-point
    
    set smoothed-path fput new-point smoothed-path
    set end-point new-point
    set index index - 1
  ]
  
  report fput #start smoothed-path
end



to-report get-closest-point-on-line [ #line #point ]
  ;; URL: http://paulbourke.net/geometry/pointlineplane/
  
  let x1 first first #line
  let y1 last first #line
  
  let x2 first last #line
  let y2 last last #line
  
  let x3 first #point
  let y3 last #point
  
  let denominator ((x2 - x1) ^ 2) + ((y2 - y1) ^ 2)
  
  if denominator = 0 [
    report [ -1 -1 ]
  ]
  
  let t ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / denominator
  
  ifelse t < 0 [
    set t 0
  ] [ if t > 1 [
    set t 1
  ]]
  
  report (list (x1 + t * (x2 - x1)) (y1 + t * (y2 - y1)))
end



to-report real-cost [ #node #goal ]
  let node get-centre #node
  let goal get-centre #goal
  
  report sqrt((abs first node - first goal) ^ 2 + (abs last node - last goal) ^ 2)
end



to-report manhattan-distance [ #node #goal ]
  let node get-centre #node
  let goal get-centre #goal
  
  report (abs first node - first goal) + (abs last node - last goal)
end