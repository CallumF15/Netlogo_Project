
 to create-prisoncount

   set red-prison 0
   set blue-prison 0
   set losing-score 4

 end


to imprison-player

  let redprisonX 0
    let redprisonY 0
    let blueprisonX 0
    let blueprisonY 0

    ask players with [color = blue and state ="jail"][
      ask prisons with [color = red][
        set redprisonX xcor
        set redprisonY ycor
      ]
      setxy redprisonX redprisonY
      set path get-path patch-here first [ patch-here ] of prisons with [color = red]
      set red-prison red-prison + 1
    ]
    
    ask players with [color = red and state ="jail"][
      ask prisons with [color = blue][
        set blueprisonX xcor
        set blueprisonY ycor
      ]
      setxy blueprisonX blueprisonY
      set path get-path patch-here first [ patch-here ] of prisons with [color = blue]
      set blue-prison blue-prison + 1
    ]

end

to release-player

let blueNear false
  let redNear false
  
  ask players with [color = blue and state = "jail"][
    ifelse(any? players with [color = blue and state != "jail"] in-radius .2)[
      set blueNear true
    ][set blueNear false ]
  ]
  
  ask players with [color = red and state = "jail"][
    ifelse(any? players with [color = red and state != "jail"] in-radius .2)[
      set redNear true
    ][set redNear false ]
  ]

if(blueNear = true)[
  free-player blue
]

if(redNear = true)[
 free-player red
]

end

to free-player [colors]
  
  let opp 0
  if(colors = red) [ set opp blue ]
  if(colors = blue) [ set opp red ]
  
  let PrisonX 0
  let PrisonY 0
   
  ask players with [ color = colors and state = "jail"][
   ask prisons with [color = opp ][
      set PrisonX xcor
      set PrisonY ycor
    ]

  
    if(colors = blue) [  set blue-prison blue-prison - 1   set xcor PrisonX + 1 set ycor PrisonY]
    if(colors = red) [  set red-prison red-prison - 1 set xcor PrisonX - 1 set ycor PrisonY] 
  
  ]
    
end

to move-evade ;;sets player position to somewhere to escape enemy
  
  let blueX 0
  let blueY 0
  
  ask players with [color = red and state = "evade"][
    ;;randomly choose a path in opposite direction of enemy
    
    ask players with [color = blue] in-radius .2[ ;;get enemy in-radius of player ;;get position
      set blueX xcor
      set blueY ycor
    ]
    
    ;;set random coordinates here
    ;;apply to pathfinding
  ]
  
end

to defend-capturer
  
  let redPosX 0
  let redPosY 0
  let bluePosX 0
  let bluePosY 0

if(color = red)[
  ;;let targetblah one-of players with [ color = red and hasFlag = true ]
 ;; if targetblah != nobody [ set path get-path patch-here first [ patch-here ] of targetblah]
 
  set path get-path patch-here first [ patch-here ] of players with [color = red and hasFlag = true]
]

if(color = blue)[
   
  ;;let targetblah one-of players with [ color = blue and hasFlag = true ]
  set path get-path patch-here first [ patch-here ] of players with [color = blue and hasFlag = true]
]
  

end

to defend-flag
  
  set path get-path patch-here first [ patch-here ] of flagBLUE
  
  ;;set to patrol radius around flag
  
end

to check-defeat

  if red-prison = losing-score [blue-victory]
  if blue-prison = losing-score [red-victory]

end
