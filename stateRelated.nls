
 to create-prisoncount

   set red-prison 0
   set blue-prison 0
   set players-prison 4

 end


to imprison-player

  let redprisonX 0
    let redprisonY 0
    let blueprisonX 0
    let blueprisonY 0

    ask players with [color = blue and state ="jail"][
      ask prisons with [color = red][
        set redprisonX xcor
        set redprisonY ycor
      ]
      setxy redprisonX redprisonY
      set path get-path patch-here first [ patch-here ] of prisons with [color = red]
      set red-prison red-prison + 1
    ]
    
    ask players with [color = red and state ="jail"][
      ask prisons with [color = blue][
        set blueprisonX xcor
        set blueprisonY ycor
      ]
      setxy blueprisonX blueprisonY
      set path get-path patch-here first [ patch-here ] of prisons with [color = blue]
      set blue-prison blue-prison + 1
    ]

end

to release-player

let blueNear false
let redNear false
  
  if(color = blue)[
<<<<<<< HEAD
    ask players with [color = blue and state = "jail"] in-radius .5[
=======
    ask players with [color = blue and state = "jail"] in-radius 1[
>>>>>>> origin/master
      set blueNear true
      set state "freed"
    ]
  ]
  
  if(color = red)[
<<<<<<< HEAD
    ask players with [color = red and state = "jail"] in-radius .5[
=======
    ask players with [color = red and state = "jail"] in-radius 1[
>>>>>>> origin/master
      set redNear true
      set state "freed"
    ]
  ]

end

to free-player [colors]
  
  let opp 0
  if(colors = red) [ set opp blue ]
  if(colors = blue) [ set opp red ]
  
  let PrisonX 0
  let PrisonY 0
   
   ask prisons with [color = opp ][
      set PrisonX xcor
      set PrisonY ycor
    ]
    if(colors = blue) [  set blue-prison blue-prison - 1   set xcor PrisonX + 1 set ycor PrisonY]
    if(colors = red) [  set red-prison red-prison - 1 set xcor PrisonX - 1 set ycor PrisonY]  
end

to move-evade[player] ;;sets player position to somewhere to escape enemy
  
  if(color = red)[ 
      let redFlagRadius false
    
      ifelse(any? flagRED in-radius 1)[ ;;if near their flag, don't evade?
          set redFlagRadius true
      ][  set redFlagRadius false ]
      
      
      set path get-path patch-here first [ patch-here ] of flagRED
      
      let redRadius false
      
      ifelse(any? players with [color = red] in-radius 1)[
         set redRadius true
      ][ set redRadius false]
      
      if(redRadius = true and redFlagRadius = false) [ set path get-path patch-here first [ patch-here ] of flagBLUE]
  ]
  
  if(color = blue)[
      let blueFlagRadius false
      
      ifelse(any? flagBLUE in-radius 1)[ ;;if near their flag, don't evade?
          set blueFlagRadius true
      ][  set blueFlagRadius false ]
    
      set path get-path patch-here first [ patch-here ] of flagBLUE
      
      let blueRadius false
      
      ifelse(any? players with [color = blue] in-radius 1)[
         set blueRadius true
      ][ set blueRadius false]
      
      if(blueRadius = false and blueFlagRadius = false) [ set path get-path patch-here first [ patch-here ] of flagRED]
  ]

end

to defend-capturer
  
  let redPosX 0
  let redPosY 0
  let bluePosX 0
  let bluePosY 0

if(color = red)[

 let enemyInradius false
 let enemyToTarget 0
 
  set path get-path patch-here first [ patch-here ] of players with [color = red and hasFlag = true]
  
  ask players with [color = blue] in-radius 1[
    set enemyToTarget players
    set enemyInradius true
  ]
  if(enemyInradius = true)[  set path get-path patch-here first [ patch-here ] of enemyToTarget ]
]

if(color = blue)[
   
   let enemyInradius2 false
   let enemyTotarget2 false
   
   set path get-path patch-here first [ patch-here ] of players with [color = blue and hasFlag = true]
   
  ask players with [color = red] in-radius 1[
    set enemyToTarget2 players
    set enemyInradius2 true
  ]
  if(enemyInradius2 = true)[  set path get-path patch-here first [ patch-here ] of enemyToTarget2 ]
]
  

end

to defend-flag
  
  let redsTarget 0
  let blueTargets 0
  let blueHasTarget false
  let redHasTarget false
  
  if(color = red)[
    ask players with [color = blue] in-radius 1[
      set redsTarget players
      set redHasTarget true
    ] 
    if(redHasTarget = true)[ set path get-path patch-here first [ patch-here ] of redsTarget ]
  ]
  
  if(color = blue)[
    ask players with [color = red] in-radius 1[
      set blueTargets players
      set blueHasTarget true
    ] 
   if(blueHasTarget = true)[ set path get-path patch-here first [ patch-here ] of blueTargets ]
  ]
 
end

to check-defeat

  if red-prison = players-prison [blue-victory]
  if blue-prison = players-prison [red-victory]

end
